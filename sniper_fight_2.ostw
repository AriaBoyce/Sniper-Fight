globalvar define ana_point;
globalvar define ashe_point;
globalvar define hanzo_point;
globalvar define widow_point;
globalvar define score_limit;
playervar define speed_boost;
playervar define damage_list;
playervar define local_point;
playervar define current_hero;
rule: "Player Spawn"
Event.OngoingPlayer
if(HasSpawned())
{
    DisableGameModeHud(EventPlayer());
    DisableGameModeInworldUI(EventPlayer());
    CreateHudText(EventPlayer(),null,null,"Time: {0}".Format([RoundToInteger(MatchTime())]),Location.Top,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    if(TeamOf(EventPlayer()) == Team.Team1)
    {
        CreateHudText(EventPlayer(),null,null,"Match Score {0}:{1}".Format([TeamScore(Team.Team1),TeamScore(Team.Team2)]),Location.Top,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    }
    else
    {
        CreateHudText(EventPlayer(),null,null,"Match Score {1}:{0}".Format([TeamScore(Team.Team1),TeamScore(Team.Team2)]),Location.Top,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    }
    damage_list = EmptyArray();

    if(HeroOf() == Hero.Ana)
    {
        local_point = ana_point;
    }
    else if(HeroOf() == Hero.Ashe)
    {
        local_point = ashe_point;
    }
    else if(HeroOf() == Hero.Hanzo)
    {
        local_point = hanzo_point;
    }
    else
    {
        local_point = widow_point;
    }
    current_hero = HeroOf(EventPlayer());
}

rule: "Disable Hud and stuff"
Event.OngoingGlobal
{
    score_limit = WorkshopSettingInteger("Settings","Score Limit",50,10,100,0);
    ana_point = WorkshopSettingReal("Settings","Ana Score Mult",3.0,1.0,10,1);
    ashe_point = WorkshopSettingReal("Settings","Ashe Score Mult",2.0,1.0,10,1);
    hanzo_point = WorkshopSettingReal("Settings","Hanzo Score Mult",1.0,1.0,10,1);
    widow_point = WorkshopSettingReal("Settings","Widow Score Mult",1.0,1.0,10,1);
    Wait(1.2);
    DisableCompletion();
    DisableScoring();
    
    SetMatchTime(10);
    Wait(10.1);
    SetMatchTime(10);
    Wait(10);
    DisableAnnouncer();
    Wait(5);
    EnableAnnouncer();
}

rule: "Speed Boost"
Event.OngoingPlayer
if(speed_boost)
{
    SetMoveSpeed(EventPlayer(),130);
    WaitUntil(IsInSpawnRoom(EventPlayer()) == false,100);
    Wait(3);
    SetMoveSpeed(EventPlayer(),100);
}

rule: "Check For Win"
Event.OngoingGlobal
if(TeamScore(Team.Team1) >= score_limit || TeamScore(Team.Team2) >= score_limit)
{
    if(TeamScore(Team.Team1) >= score_limit)
    {
        DeclareTeamVictory(Team.Team1);
    }
    else
    {
        DeclareTeamVictory(Team.Team2);
    }
}

rule: "Check for Win at time end"
Event.OngoingGlobal
if(MatchTime() == 0)
{
    if(TeamScore(Team.Team1) > TeamScore(Team.Team2))
    {
        DeclareTeamVictory(Team.Team1);
    }
    else if(TeamScore(Team.Team2) > TeamScore(Team.Team1))
    {
        DeclareTeamVictory(Team.Team2);
    }
    else
    {
        DeclareMatchDraw();
    }
}

rule: "Damage list check"
Event.OnDamageTaken
{
    if(!ArrayContains(Victim().damage_list,Attacker()))
    {
        Victim().damage_list = Append(Victim().damage_list, Attacker());
    }
}

rule: "Clear Array At Max HP"
Event.OngoingPlayer
if(Health() == MaxHealth())
{
    damage_list = EmptyArray();
}

rule: "On Death"
Event.OnDeath
{
    define temp = 0;
    define array_size = 0;
    while(Victim().damage_list[array_size] != null)
    {
        array_size++;
    }

    for(define i = 0; i < array_size; i++)
    {
        temp += Victim().damage_list[i].local_point;
    }
    temp /= array_size;
    ModifyTeamScore(OppositeTeamOf(TeamOf(Victim())),RoundToInteger(temp,Rounding.Down));
}
rule: "Hero Change"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) != current_hero)
{
    if(HeroOf() == Hero.Ana)
    {
        local_point = ana_point;
    }
    else if(HeroOf() == Hero.Ashe)
    {
        local_point = ashe_point;
    }
    else if(HeroOf() == Hero.Hanzo)
    {
        local_point = hanzo_point;
    }
    else
    {
        local_point = widow_point;
    }
    current_hero = HeroOf(EventPlayer());
}